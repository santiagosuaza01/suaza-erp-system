// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// USUARIOS Y AUTENTICACIÓN
// ========================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  isActive          Boolean  @default(true)
  isEmailVerified   Boolean  @default(false)
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  lastLogin         DateTime?
  failedLoginAttempts Int    @default(0)
  lockedUntil       DateTime?
  roleId            String
  role              Role     @relation(fields: [roleId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  sales             Sale[]
  purchases         Purchase[]
  inventoryMovements InventoryMovement[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     // Array de permisos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  users       User[]

  @@map("roles")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  table     String   // Nombre de la tabla afectada
  recordId  String?  // ID del registro afectado
  oldValues Json?    // Valores anteriores
  newValues Json?    // Valores nuevos
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// ========================================
// INVENTARIO
// ========================================

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  products    Product[]

  @@map("categories")
}

model Product {
  id              String   @id @default(cuid())
  code            String   @unique // Código interno
  barcode         String?  @unique // Código de barras
  name            String
  description     String?
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  unit            String   // Unidad de medida
  price           Decimal  @db.Decimal(10, 2)
  cost            Decimal  @db.Decimal(10, 2)
  stock           Int      @default(0)
  minStock        Int      @default(0)
  maxStock        Int?
  isActive        Boolean  @default(true)
  hasExpiration   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  saleItems       SaleItem[]
  purchaseItems   PurchaseItem[]
  inventoryMovements InventoryMovement[]

  @@map("products")
}

model InventoryMovement {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  type        String   // ENTRY, EXIT, ADJUSTMENT
  quantity    Int
  previousStock Int
  newStock    Int
  reason      String?  // Motivo del movimiento
  reference   String?  // Referencia (factura, nota, etc.)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@map("inventory_movements")
}

// ========================================
// PROVEEDORES Y COMPRAS
// ========================================

model Supplier {
  id              String   @id @default(cuid())
  name            String
  taxId           String?  @unique // NIT
  email           String?
  phone           String?
  address         String?
  city            String?
  contactPerson   String?
  isActive        Boolean  @default(true)
  creditLimit     Decimal? @db.Decimal(12, 2)
  paymentTerms    Int?     // Días de plazo
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  purchases       Purchase[]

  @@map("suppliers")
}

model Purchase {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  totalAmount     Decimal  @db.Decimal(12, 2)
  taxAmount       Decimal  @db.Decimal(12, 2)
  subtotal        Decimal  @db.Decimal(12, 2)
  status          String   @default("PENDING") // PENDING, PAID, CANCELLED
  paymentMethod   String?  // CASH, TRANSFER, CHECK
  paymentDate     DateTime?
  dueDate         DateTime?
  notes           String?
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  items           PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          String   @id @default(cuid())
  purchaseId  String
  purchase    Purchase @relation(fields: [purchaseId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  batchNumber String?
  expirationDate DateTime?

  @@map("purchase_items")
}

// ========================================
// CLIENTES Y VENTAS
// ========================================

model Customer {
  id              String   @id @default(cuid())
  name            String
  taxId           String?  @unique // NIT o CC
  email           String?
  phone           String?
  address         String?
  city            String?
  creditLimit     Decimal? @db.Decimal(12, 2)
  isActive        Boolean  @default(true)
  isBlocked       Boolean  @default(false)
  blockedReason   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  sales           Sale[]
  credits         Credit[]

  @@map("customers")
}

model Sale {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  customerId      String?
  customer        Customer? @relation(fields: [customerId], references: [id])
  customerName    String?  // Para ventas sin cliente registrado
  customerTaxId   String?
  totalAmount     Decimal  @db.Decimal(12, 2)
  taxAmount       Decimal  @db.Decimal(12, 2)
  subtotal        Decimal  @db.Decimal(12, 2)
  discount        Decimal  @default(0) @db.Decimal(10, 2)
  paymentMethod   String   // CASH, CREDIT, TRANSFER
  status          String   @default("PENDING") // PENDING, PAID, CANCELLED
  dianStatus      String?  // DIAN response status
  dianResponse    Json?    // DIAN response data
  notes           String?
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  items           SaleItem[]
  payments        Payment[]

  @@map("sales")
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  discount    Decimal  @default(0) @db.Decimal(10, 2)

  @@map("sale_items")
}

// ========================================
// CRÉDITOS Y PAGOS
// ========================================

model Credit {
  id              String   @id @default(cuid())
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  amount          Decimal  @db.Decimal(12, 2)
  interestRate    Decimal  @db.Decimal(5, 2) // Porcentaje
  term            Int      // Días
  startDate       DateTime @default(now())
  dueDate         DateTime
  status          String   @default("ACTIVE") // ACTIVE, PAID, OVERDUE, CANCELLED
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  payments        Payment[]

  @@map("credits")
}

model Payment {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(12, 2)
  method      String   // CASH, TRANSFER, CHECK, CARD
  reference   String?  // Número de referencia
  notes       String?
  saleId      String?
  sale        Sale?    @relation(fields: [saleId], references: [id])
  creditId    String?
  credit      Credit?  @relation(fields: [creditId], references: [id])
  createdAt   DateTime @default(now())

  @@map("payments")
}

// ========================================
// CONFIGURACIÓN DEL SISTEMA
// ========================================

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model DianConfig {
  id              String   @id @default(cuid())
  companyName     String
  taxId           String   @unique // NIT de la empresa
  address         String
  city            String
  phone           String
  email           String
  resolutionNumber String
  resolutionDate  DateTime
  prefix          String
  startNumber     Int
  endNumber       Int
  currentNumber   Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("dian_config")
}

// ========================================
// NOTIFICACIONES
// ========================================

model Notification {
  id          String   @id @default(cuid())
  type        String   // EMAIL, SMS, WHATSAPP, SYSTEM
  recipient   String   // Email, teléfono o userId
  subject     String?
  message     String
  status      String   @default("PENDING") // PENDING, SENT, FAILED
  sentAt      DateTime?
  error       String?
  metadata    Json?    // Datos adicionales
  createdAt   DateTime @default(now())

  @@map("notifications")
} 