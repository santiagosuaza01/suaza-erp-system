version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: suaza_postgres
    environment:
      POSTGRES_DB: suaza_db
      POSTGRES_USER: suaza_user
      POSTGRES_PASSWORD: suaza_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - suaza_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U suaza_user -d suaza_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: suaza_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - suaza_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: suaza_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://suaza_user:suaza_password@postgres:5432/suaza_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/backups:/app/backups
    ports:
      - "3001:3001"
    networks:
      - suaza_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suaza_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:80"
    networks:
      - suaza_network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: suaza_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - suaza_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Backup automÃ¡tico
  backup:
    image: postgres:15-alpine
    container_name: suaza_backup
    environment:
      POSTGRES_DB: suaza_db
      POSTGRES_USER: suaza_user
      POSTGRES_PASSWORD: suaza_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - suaza_network
    command: >
      sh -c "
        echo '0 2 * * * /backup.sh' > /etc/crontabs/root &&
        crond -f
      "
    depends_on:
      - postgres
    restart: unless-stopped

  # Monitor de logs (opcional)
  logviewer:
    image: amir20/dozzle:latest
    container_name: suaza_logviewer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - suaza_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  suaza_network:
    driver: bridge 